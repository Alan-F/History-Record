#is.na()
a=0/0
b=NA
c=c(a,b)
is.na(c)

#paste()
d1=letters
d2=LETTERS
d3=month.abb
d4=month.name
d5=pi
d=paste(d1,d2,sep='^')


#time
Sys.time()
Sys.time()-2
Sys.Date()
Sys.Date()-1
system.time()#函数运行时间
proc.time()#proc.time() 可以获得R 进程存在的时间，system.time() 通过调用两次proc.time()来计算函数运行的时间
x <- rnorm(1e7)
system.time(x1 <- sort(x, method = "shell"))
system.time(x2 <- sort(x, method = "quick"))

#attributes()
attributes(d)

#sort()/order()/ordered()
e=c(seq(1,-10,by=-2),seq(1,3,length=3),rep(c(1,2,3),each=2),rep((1:4),times=2));e
sort(e,dec=T)
order(e)
ordered(e)
print(e)

#tapply
tapply(vector,factor,function)---tapply(X,Index,FUN)
f=c(sample(1:50,10))
f=as.vector(f)
g=as.factor(c(rep(sample(LETTERS,5),times=2)))
tapply(f,g,median)

#dim
z=c(sample(1:50,20))
dim(z)=c(2,2,5)
is.array(z)
is.vector(z)
attributes(z)

#array
h=array(1:20,dim=c(4,5))
i=array(c(1:3,2:4),dim=c(3,2))
h[i]

#outer / %o%
j=c(1:3)
k=c(1:4)
j%o%k
outer(j,k,paste)
l=table(outer(j,k,"+"))
plot(as.numeric(names(l)),l,type='h',xlab='Determinant',ylab='Frequency')

#aperm 交换坐标 特殊情况t()
m=array(1:24,dim=c(2,3,4))
n=aperm(m,c(3,2,1))
m[1,2,3];n[3,2,1]
m[2,1,4];n[4,1,2]

#solve(A)/solve(A,b)

#eigen
o=matrix(sample(1:50,16),4,4)
eigen(o)
eigen(o)$val
eigen(o)$vec

#svm(Single Value Decomposition)  进一步研究
svd(o)

#lsfit (Least Squares Fit)

#qr 进一步研究
qr(o)

#cut
cut()
